<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zch</title>
  
  <subtitle>money&amp;money</subtitle>
  <link href="https://poison02.github.io/atom.xml" rel="self"/>
  
  <link href="https://poison02.github.io/"/>
  <updated>2023-02-17T12:46:52.054Z</updated>
  <id>https://poison02.github.io/</id>
  
  <author>
    <name>Zch ch</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SprintBoot-文件上传</title>
    <link href="https://poison02.github.io/2023/02/17/SprintBoot-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://poison02.github.io/2023/02/17/SprintBoot-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2023-02-17T12:42:35.000Z</published>
    <updated>2023-02-17T12:46:52.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>首先，要规定好文件上传的大小和文件上传的类型，这里我们就用两个常量去定义, 这里写在controller层，也可以自己封装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">final</span> <span class="variable">AVATAR_MAX_SIZE</span> <span class="operator">=</span> <span class="number">101</span> * <span class="number">1024</span>; <span class="comment">// 这里我就定义100kb</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ArrayList&lt;String&gt; AVATAR_TYPE = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 这里使用数组存储</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里写一个静态块，SpringBoot扫描到就会自动执行</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/jpg&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/gif&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    AVATAR_TYPE.add(<span class="string">&quot;image/webg&quot;</span>);</span><br><span class="line">&#125; <span class="comment">// 暂且就规定这五种类型的图片</span></span><br></pre></td></tr></table></figure><h2 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h2><p>然后从mapper层开始先写 <code>sql</code> 语句吧…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写更新图片的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@username</span> 用户</span></span><br><span class="line"><span class="comment">* <span class="doctag">@avatar</span> 上传的头像</span></span><br><span class="line"><span class="comment">* <span class="doctag">@modifiedUser</span> 修改人</span></span><br><span class="line"><span class="comment">* <span class="doctag">@modifiedTime</span> 修改时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Update(&quot;update user set avatar=#&#123;avatar&#125;, modifiedUser=#&#123;modifiedUser&#125;, modifiedTime=#&#123;modifiedTime&#125;&quot; +</span></span><br><span class="line"><span class="meta">        &quot;where username=#&#123;username&#125;&quot;)</span></span><br><span class="line">Integer <span class="title function_">updateAvatar</span><span class="params">(String username, String avatar, String modifiedUser, String modifiedTime)</span>;</span><br></pre></td></tr></table></figure><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>现在开始写service层，但是service层有接口和实现类，所以有两个地方写。</p><p>首先，service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@username</span> 用户名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@avatar</span> 上传的头像</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Integer <span class="title function_">updateAvatar</span><span class="params">(String username, String avatar)</span>;</span><br></pre></td></tr></table></figure><p>然后service实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">updateAvatar</span><span class="params">(String username, Srtring avatar)</span>&#123;</span><br><span class="line">    <span class="comment">// 从数据库中查出对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.findByUsername(username);</span><br><span class="line">    <span class="comment">// 查询用户的状态，是否被封禁</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == result.isDelete)&#123;</span><br><span class="line">        <span class="comment">// 用户被封禁，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 补全数据（修改人和修改时间）</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">midifiedTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateAvatar(username, avatar, username, modifiedTime);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> != rows)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">updateException</span>(<span class="string">&quot;服务器维护中！请联系管理员！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> JsonResult&lt;String&gt; <span class="title function_">updateAvatar</span><span class="params">(MultipartFile file, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">// 判断上传文件是否为空 isEmpty() 默认为true</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> file.isEmpty();</span><br><span class="line">    <span class="keyword">if</span> (isEmpty)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>(<span class="string">&quot;请选择您要上传的文件！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取文件的大小</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> file.getSize();</span><br><span class="line">    System.err.println(<span class="string">&quot;文件大小为：&quot;</span> + fileSize);</span><br><span class="line">    <span class="comment">// 判定文件是否超过规定的大小</span></span><br><span class="line">    <span class="keyword">if</span> (fileSize &gt; AVATAR_MAX_SIZE)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>(<span class="string">&quot;上传失败，不允许上传超过&quot;</span> + AVATAR_MAX_SIZE / <span class="number">1024</span> + <span class="string">&quot;KB的文件！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取文件扩展名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> file.getContentType();</span><br><span class="line">    System.err.println(<span class="string">&quot;文件后缀为：&quot;</span> + contentType);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否符合规则 判断获取的文件扩展名是否属于规定的范围</span></span><br><span class="line">    <span class="keyword">if</span> (!AVATAR_TYPE.contains(contentType))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeException</span>(<span class="string">&quot;上传失败！仅允许上传一下类型的文件！&quot;</span> + AVATAR_TYPE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取上传的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    System.err.println(<span class="string">&quot;原始文件名：&quot;</span> + fileName);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定存储的路径 通过servlet容器获取目标路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> session.getServletContent().getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">    <span class="comment">// 判断该目录是否存在 不存在就创建一个</span></span><br><span class="line">    <span class="keyword">if</span> (!dir.exists())&#123;</span><br><span class="line">        dir.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 改名操作， 需要考虑名字不能重复，所以用系统毫秒（1970.1.1到现在）加上UUID</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + System.currentTimeMillis() + UUID.randomUUID();</span><br><span class="line">    <span class="comment">// 保留原来的名字</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 先获取 . 出现的地方，再用subString截取文件名</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        suffix = fileName.subString(index);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最终名字</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">endName</span> <span class="operator">=</span> newFileName + suffix;</span><br><span class="line">    <span class="comment">// 保存至服务器</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">save</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path, endName);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 写入文件的操作</span></span><br><span class="line">        file.transferTo(save);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileIOException</span>(<span class="string">&quot;上传失败！出现文件读写错误！请重新上传！&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IllegalStateException e)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileStateException</span>(<span class="string">&quot;上传失败！你的文件上传异常！请重试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将保存文件的路径记录到数据库中</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload&quot;</span> + endName;</span><br><span class="line">    <span class="comment">// 查看文件路径</span></span><br><span class="line">    System.err.println(<span class="string">&quot;文件路径为：&quot;</span> + avatar);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前用户名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;username&quot;</span>).toString();</span><br><span class="line">    userService.updateAvatar(username, avatar);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(<span class="number">200</span>, avatar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form-avatar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;updateAvatar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击上传&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn-avatar&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">$(<span class="string">&quot;#btn-avatar&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/changeAvatar&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 如果不关闭contentType 那么默认会将图片转换成字符数据json格式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 不关闭的话 就会转换成查询字符串 如%7d&amp;%s... 不关闭就会造成文件损坏</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">processData</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>($(<span class="string">&quot;#form-avatar&quot;</span>)[<span class="number">0</span>]),</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">success</span>(<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;头像上传成功！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 将新头像给到标签中</span></span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#aimg&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, res.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(res.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><p>可能会出现文件因为过大就不能上传的问题，这是因为springboot默认时只能上传到1MB，所以这里我们需要更改一下配置</p><p>我们在我们的启动类中修改默认配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MultipartConfigElement <span class="title function_">getFactory</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 修改配置, 默认单次上传1MB，现在改为100MB</span></span><br><span class="line"><span class="type">MultipartConfigFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultipartConfigFactory</span>();</span><br><span class="line"></span><br><span class="line">factory.setMaxFileSize(DataSize.ofMegabytes(<span class="number">100</span>));</span><br><span class="line">factory.setMaxRequestSize(DataSize.ofMegabytes(<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> factory.createMultipartConfig();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>@SpringBootApplication</code> 下面需要添加  <code>@Configuration</code>，表示全局配置。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;文件上传&quot;&gt;&lt;a href=&quot;#文件上传&quot; class=&quot;headerlink&quot; title=&quot;文件上传&quot;&gt;&lt;/a&gt;文件上传&lt;/h1&gt;&lt;p&gt;首先，要规定好文件上传的大小和文件上传的类型，这里我们就用两个常量去定义, 这里写在controller层，也可以自己封装类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;AVATAR_MAX_SIZE&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;101&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 这里我就定义100kb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ArrayList&amp;lt;String&amp;gt; AVATAR_TYPE = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(); &lt;span class=&quot;comment&quot;&gt;// 这里使用数组存储&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这里写一个静态块，SpringBoot扫描到就会自动执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AVATAR_TYPE.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;image/jpg&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AVATAR_TYPE.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;image/gif&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AVATAR_TYPE.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;image/jpeg&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AVATAR_TYPE.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;image/png&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AVATAR_TYPE.add(&lt;span class=&quot;string&quot;&gt;&amp;quot;image/webg&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// 暂且就规定这五种类型的图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;mapper&quot;&gt;&lt;a href=&quot;#mapper&quot; class=&quot;headerlink&quot; title=&quot;mapper&quot;&gt;&lt;/a&gt;mapper&lt;/h2&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://poison02.github.io/categories/SpringBoot/"/>
    
    <category term="SpringBoot-文件上传" scheme="https://poison02.github.io/categories/SpringBoot/SpringBoot-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
    <category term="SpringBoot" scheme="https://poison02.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SprintBoot-拦截器</title>
    <link href="https://poison02.github.io/2023/02/17/SprintBoot-%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://poison02.github.io/2023/02/17/SprintBoot-%E6%8B%A6%E6%88%AA%E5%99%A8/</id>
    <published>2023-02-17T12:42:17.000Z</published>
    <updated>2023-02-17T12:45:49.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-拦截器"><a href="#SpringBoot-拦截器" class="headerlink" title="SpringBoot-拦截器"></a>SpringBoot-拦截器</h1><p>拦截器相信不会陌生，就是比如说我们在一些主页面等页面通过 url 去访问本来是不应该被访问的（如果没有登录的话），这时候我们就需要用拦截器去拦截这个请求。</p><p>我们通过下面两个操作实现拦截器</p><p>1、新建一个<code>interceptor</code>包，写一个登录拦截的类</p><p><code>LoginInterceptor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录拦截器</span></span><br><span class="line"><span class="comment"> * HandlerInterceptor</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * preHandle 添加判定规则</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == request.getSession().getAttribute(<span class="string">&quot;username&quot;</span>))&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/Login.html&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、通过全局配置去配置拦截器</p><p>新建一个<code>config</code>包，创建一个类</p><p><code>InterceptorConfigurer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 系统配置注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">hI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 加白名单，有些资源不做拦截</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;/Register.html&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;/Login.html&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;/register&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;/img/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加拦截器, 并在此基础上添加不被拦截的白名单集合</span></span><br><span class="line">        registry.addInterceptor(hI).excludePathPatterns(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上操作就可以实现一个简单的登录拦截器。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SpringBoot-拦截器&quot;&gt;&lt;a href=&quot;#SpringBoot-拦截器&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot-拦截器&quot;&gt;&lt;/a&gt;SpringBoot-拦截器&lt;/h1&gt;&lt;p&gt;拦截器相信不会陌生，就是比如说我们在一些主页面等页面通过 url 去访问本来是不应该被访问的（如果没有登录的话），这时候我们就需要用拦截器去拦截这个请求。&lt;/p&gt;
&lt;p&gt;我们通过下面两个操作实现拦截器&lt;/p&gt;
&lt;p&gt;1、新建一个&lt;code&gt;interceptor&lt;/code&gt;包，写一个登录拦截的类&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://poison02.github.io/categories/SpringBoot/"/>
    
    <category term="SpringBoot-拦截器" scheme="https://poison02.github.io/categories/SpringBoot/SpringBoot-%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
    
    <category term="SpringBoot" scheme="https://poison02.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-Start</title>
    <link href="https://poison02.github.io/2023/02/13/SpringBoot-Start/"/>
    <id>https://poison02.github.io/2023/02/13/SpringBoot-Start/</id>
    <published>2023-02-13T11:30:30.000Z</published>
    <updated>2023-02-13T11:37:46.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-boot介绍"><a href="#Spring-boot介绍" class="headerlink" title="Spring boot介绍"></a>Spring boot介绍</h1><p>略</p><h2 id="Spring-boot-项目框架安装"><a href="#Spring-boot-项目框架安装" class="headerlink" title="Spring boot 项目框架安装"></a>Spring boot 项目框架安装</h2><p>网站：<a href="https://start.spring.io/">https://start.spring.io/</a></p><p>根据图中的标号来就行了，其中有几步需要单独说一下</p><p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230213111346166.png" alt="image-20230213111346166"></p><p>在第八步选择依赖时</p><p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230213124452317.png" alt="image-20230213124452317"></p><p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230213124558378.png" alt="image-20230213124558378"></p><p>选择这两个依赖，最后再进行第九步安装下来即可。</p><h2 id="框架的基本使用"><a href="#框架的基本使用" class="headerlink" title="框架的基本使用"></a>框架的基本使用</h2><h3 id="1、解压并打开文件"><a href="#1、解压并打开文件" class="headerlink" title="1、解压并打开文件"></a>1、解压并打开文件</h3><p>找到刚才下载的压缩包，进行解压，然后用IDEA打开此文件</p><p>打开之后是这样的</p><p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230213124814850.png" alt="image-20230213124814850"></p><p>然后等待下载安装所需要的依赖，此过程需要全程联网</p><h3 id="2、基本使用"><a href="#2、基本使用" class="headerlink" title="2、基本使用"></a>2、基本使用</h3><p>找到 src 目录下的 <code>BootDemoApplication</code>双击进去，右键点击运行，然后浏览器输入 <code>localhost:8080</code>，访问如下即成功</p><p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230213125100623.png" alt="image-20230213125100623"></p><p>接下来开始写一些基础的方法</p><p>首先，在 src 目录下的 <code>com.zch.bootDemo</code>下面新建一个包 <code>controller</code>，然后在 <code>controller</code> 下新建一个类，如下</p><p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230213125301178.png" alt="image-20230213125301178"></p><p>写上如下代码，所有注解代码中都有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zch.bootDemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Controller</span></span><br><span class="line"><span class="comment">*   控制器层的标志 当我们在浏览器中访问项目时，项目会根据网址访问到带有Controller注解的类，并精确的查找处理请求的方法</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* RestController</span></span><br><span class="line"><span class="comment">*   同属于控制器层的标志 后端不再返回网页，而是返回处理后的数据（纯数据）</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个方法，测试框架</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * RequestMapping</span></span><br><span class="line"><span class="comment">    *   作用：给方法添加标记，标记具有唯一性，在浏览器中访问时，可以通过标记找到方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/firstDemo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">firstFunc</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳转到网页的名字</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;FirstDemo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在 <code>resources</code> 下面的 <code>templates</code>新建html文件</p><p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230213125721066.png" alt="image-20230213125721066"></p><p>里面就写前端代码即可。</p><p>然后重新运行 <code>BootDemoApplication</code>，再重新去浏览器启动 <code>localhost:8080/firstDemo</code>，看到如下即成功</p><p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230213125833160.png" alt="image-20230213125833160"></p><h3 id="3、基本使用的升级1"><a href="#3、基本使用的升级1" class="headerlink" title="3、基本使用的升级1"></a>3、基本使用的升级1</h3><p>其实方法都如法炮制的，我就直接上代码吧！</p><p><code>DemoController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zch.bootDemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Controller</span></span><br><span class="line"><span class="comment">*   控制器层的标志 当我们在浏览器中访问项目时，项目会根据网址访问到带有Controller注解的类，并精确的查找处理请求的方法</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* RestController</span></span><br><span class="line"><span class="comment">*   同属于控制器层的标志 后端不再返回网页，而是返回处理后的数据（纯数据）</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个方法，测试框架</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * RequestMapping</span></span><br><span class="line"><span class="comment">    *   作用：给方法添加标记，标记具有唯一性，在浏览器中访问时，可以通过标记找到方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/firstDemo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">firstFunc</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;FirstDemo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写一个方法去访问TestInput</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showInput&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showInput</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TestInput&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二个方法，测试前端传输数据到后端</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testInput&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testInput</span><span class="params">(String msg)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出，表示已经接收到数据了</span></span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TestInput&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showThird&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showThird</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ThirdDemo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三个方法，前后端交互数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/thirdDemo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">thirdFunc</span><span class="params">(String msg, Model m)</span>&#123;</span><br><span class="line">        <span class="comment">// Model 工具包 用于向前端返回数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收前端收集到的数据，向前端返回后端数据</span></span><br><span class="line">        <span class="keyword">if</span> (msg.equals(<span class="string">&quot;hahaha&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// m.addAttribute(), 该方法可以添加数据到Model中</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 参数</span></span><br><span class="line"><span class="comment">            *   1、数据的名称</span></span><br><span class="line"><span class="comment">            *   2、数据本身</span></span><br><span class="line"><span class="comment">            * */</span></span><br><span class="line">            m.addAttribute(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;你干嘛&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ThirdDemo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>TestInput.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/testInput&quot;</span>&gt;</span></span><br><span class="line">  请输入你的身份证号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ThirdDemo.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/thirdDemo&quot;</span>&gt;</span></span><br><span class="line">  请输入你的身份证号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--通过模板语法进行后端数据的显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;info&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行的话就只需要浏览器输入 <code>localhost:8080</code> 然后添加对应的 RequestMapping 的 url 即可看到效果，此处略。</p><h2 id="记录可能出现的问题"><a href="#记录可能出现的问题" class="headerlink" title="记录可能出现的问题"></a>记录可能出现的问题</h2><h3 id="1、端口被占用"><a href="#1、端口被占用" class="headerlink" title="1、端口被占用"></a>1、端口被占用</h3><p>在 <code>application.properties</code>里面更改端口号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port = 808x <span class="comment">// 端口号自己设定 只要不冲突即可</span></span><br></pre></td></tr></table></figure><h3 id="2、写了方法访问网站未加载出来"><a href="#2、写了方法访问网站未加载出来" class="headerlink" title="2、写了方法访问网站未加载出来"></a>2、写了方法访问网站未加载出来</h3><p>这里需要注意 <code>controller</code>包和 <code>bootDemo</code>一定不要是同级的！</p><p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230213110657242.png" alt="image-20230213110657242"></p><p>一定要像这样子才可以正确访问！</p><h2 id="练习：登录-amp-注册"><a href="#练习：登录-amp-注册" class="headerlink" title="练习：登录 &amp; 注册"></a>练习：登录 &amp; 注册</h2><p><code>UserController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zch.bootDemo.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 练习：登录 &amp; 注册</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 ArrayList 存放假数据</span></span><br><span class="line">    ArrayList&lt;String&gt; nameList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;String&gt; pwdList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示注册页面</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showReg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showReg</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/userDemo/Register&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册逻辑实现</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(String username, String password, Model m)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 首先 接收到用户名后，第一件事查询集合中是否存在相同用户名，</span></span><br><span class="line"><span class="comment">        *   如果存在，则提醒用户已存在，反之则将用户密码存进集合；</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">// 添加假数据</span></span><br><span class="line">        nameList.add(<span class="string">&quot;admin1&quot;</span>);</span><br><span class="line">        nameList.add(<span class="string">&quot;admin2&quot;</span>);</span><br><span class="line">        nameList.add(<span class="string">&quot;admin3&quot;</span>);</span><br><span class="line">        pwdList.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        pwdList.add(<span class="string">&quot;321&quot;</span>);</span><br><span class="line">        pwdList.add(<span class="string">&quot;132&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nameList.size(); i++) &#123;</span><br><span class="line">            <span class="comment">// 如果说有相同的用户名</span></span><br><span class="line">            <span class="keyword">if</span> (nameList.get(i).equals(username)) &#123;</span><br><span class="line">                m.addAttribute(<span class="string">&quot;regInfo&quot;</span>, <span class="string">&quot;alert(&#x27;该用户已被注册！&#x27;)&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;/userDemo/Register&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则 添加进Array</span></span><br><span class="line">        nameList.add(username);</span><br><span class="line">        pwdList.add(password);</span><br><span class="line">        m.addAttribute(<span class="string">&quot;regInfo&quot;</span>, <span class="string">&quot;alert(&#x27;注册成功！&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/userDemo/Login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showLogin</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/userDemo/Login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Login</span><span class="params">(String username, String password, Model m)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验用户名以及密码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nameList.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nameList.get(i).equals(username))&#123;</span><br><span class="line">                <span class="keyword">if</span> (pwdList.get(i).equals(password))&#123;</span><br><span class="line">                    m.addAttribute(<span class="string">&quot;name&quot;</span>, username);</span><br><span class="line">                    m.addAttribute(<span class="string">&quot;pwd&quot;</span>, password);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;/userDemo/Index&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则登陆失败</span></span><br><span class="line">        m.addAttribute(<span class="string">&quot;loginInfo&quot;</span>, <span class="string">&quot;alert(&#x27;登录失败！请重新登录！&#x27;)&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/userDemo/Login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Register.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>One Piece V1.0 用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/register&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>请输入用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>请输入密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;regInfo&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Login.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>One Piece V1.0 用户登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/login&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>请输入用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>请输入密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;regInfo&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>One Piece V1.0 用户主页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是主页！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;pwd&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Spring-boot介绍&quot;&gt;&lt;a href=&quot;#Spring-boot介绍&quot; class=&quot;headerlink&quot; title=&quot;Spring boot介绍&quot;&gt;&lt;/a&gt;Spring boot介绍&lt;/h1&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h2 id=&quot;Spring-boot-项目框架安装&quot;&gt;&lt;a href=&quot;#Spring-boot-项目框架安装&quot; class=&quot;headerlink&quot; title=&quot;Spring boot 项目框架安装&quot;&gt;&lt;/a&gt;Spring boot 项目框架安装&lt;/h2&gt;&lt;p&gt;网站：&lt;a href=&quot;https://start.spring.io/&quot;&gt;https://start.spring.io/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://poison02.github.io/categories/SpringBoot/"/>
    
    <category term="SpringBoot基础" scheme="https://poison02.github.io/categories/SpringBoot/SpringBoot%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="SpringBoot" scheme="https://poison02.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>同步和异步</title>
    <link href="https://poison02.github.io/2023/01/10/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5/"/>
    <id>https://poison02.github.io/2023/01/10/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5/</id>
    <published>2023-01-10T09:17:31.000Z</published>
    <updated>2023-01-10T09:19:19.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h1><h2 id="前言：进程和线程"><a href="#前言：进程和线程" class="headerlink" title="前言：进程和线程"></a>前言：进程和线程</h2><h3 id="1）进程"><a href="#1）进程" class="headerlink" title="1）进程"></a>1）进程</h3><p>类似程序运行的环境。比如一个工厂。</p><h3 id="2）线程"><a href="#2）线程" class="headerlink" title="2）线程"></a>2）线程</h3><p>线城市实际进行运算的东西。比如一个工厂里面的工人。</p><h2 id="一、同步"><a href="#一、同步" class="headerlink" title="一、同步"></a>一、同步</h2><p>通常情况下代码都是自上向下一行一行执行的。</p><p>同步就是后边的必须<strong>等待</strong>前边的完成才会继续。举个例子就是去餐厅点菜，用同步来说点完菜之后就一直等着上菜，什么都不做。</p><p>前边代码不执行，后面代码就不会执行，同步的代码执行会出现<strong>阻塞</strong>的情况。</p><p>一行代码执行慢会影响到整个程序的执行。</p><p>举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line"><span class="keyword">const</span> begin <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">// 这里相当于是while循环需要执行10秒钟</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - begin &lt; <span class="number">10000</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"><span class="comment">// 这里调用sum函数就会等待函数里面的while循环结束才会返回结果。程序在这里就造成了阻塞。</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222&quot;</span>);</span><br></pre></td></tr></table></figure><p>解决同步阻塞：<strong>异步</strong></p><h2 id="二、异步"><a href="#二、异步" class="headerlink" title="二、异步"></a>二、异步</h2><p>异步不需要<strong>等待</strong>。也就是说点完菜之后，去玩手机，不需要只等着菜。一段代码的执行不会影响到其他程序的运行。</p><p>举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line"><span class="keyword">const</span> begin <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">// 使用setTimeout实现异步。但是同时会出现问题，最后得到undefined。</span></span><br><span class="line">    <span class="title function_">setTimaout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"><span class="comment">// 这里因为使用的setTimeout，所以会返回undefined。</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222&quot;</span>);</span><br></pre></td></tr></table></figure><p>上边异步出现问题，异步的代码无法通过return得到</p><p>我们这里使用<strong>回调函数</strong>解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, callback</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(a + b);</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>, <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222&quot;</span>);</span><br><span class="line"><span class="comment">// 结果是先返回111和222，间隔10秒返回result的值579.</span></span><br></pre></td></tr></table></figure><p>异步的特点：不会阻塞，通过回调函数。</p><p>但是此时又有一个新的问题：<strong>“死亡金字塔”</strong></p><p>意思就是说在回调函数中再次调用函数，…，以此类推，无限套娃。</p><p>基于回调函数的异步带来的问题</p><p>​1、代码的可读性差</p><p>​2、可调试性差</p><p>此时需要一个东西可以代替回调函数解决这个问题，返回结果</p><p>引出—<strong>Promise</strong></p><p>​- Promise是一个用来存储数据的对象。存储方式特殊，可以用来存储异步调用的数据。下一章详细介绍Promise。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;同步和异步&quot;&gt;&lt;a href=&quot;#同步和异步&quot; class=&quot;headerlink&quot; title=&quot;同步和异步&quot;&gt;&lt;/a&gt;同步和异步&lt;/h1&gt;&lt;h2 id=&quot;前言：进程和线程&quot;&gt;&lt;a href=&quot;#前言：进程和线程&quot; class=&quot;headerlink&quot; title=&quot;前言：进程和线程&quot;&gt;&lt;/a&gt;前言：进程和线程&lt;/h2&gt;&lt;h3 id=&quot;1）进程&quot;&gt;&lt;a href=&quot;#1）进程&quot; class=&quot;headerlink&quot; title=&quot;1）进程&quot;&gt;&lt;/a&gt;1）进程&lt;/h3&gt;&lt;p&gt;类似程序运行的环境。比如一个工厂。&lt;/p&gt;</summary>
    
    
    
    <category term="Node.js" scheme="https://poison02.github.io/categories/Node-js/"/>
    
    <category term="同步和异步" scheme="https://poison02.github.io/categories/Node-js/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5/"/>
    
    
    <category term="Node.js" scheme="https://poison02.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js安装</title>
    <link href="https://poison02.github.io/2023/01/07/Nodejs%E5%AE%89%E8%A3%85/"/>
    <id>https://poison02.github.io/2023/01/07/Nodejs%E5%AE%89%E8%A3%85/</id>
    <published>2023-01-06T16:01:34.000Z</published>
    <updated>2023-02-10T12:44:02.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Node-jS简介"><a href="#一、Node-jS简介" class="headerlink" title="一、Node.jS简介"></a>一、Node.jS简介</h1><p>Node.js是一个运行在V8引擎上的JavaScript的运行环境。原始的JavaScript是运行在浏览器上的，而Node.js使得JavaScript可以运行在浏览器以外的地方。相对于大部分的浏览器语言来说，Node.js采用了单线程，使用异步的方式处理并发问题。</p><h1 id="二、Node-js安装"><a href="#二、Node-js安装" class="headerlink" title="二、Node.js安装"></a>二、Node.js安装</h1><h2 id="1、直接安装（通过安装包）"><a href="#1、直接安装（通过安装包）" class="headerlink" title="1、直接安装（通过安装包）"></a>1、直接安装（通过安装包）</h2><p>这里是Node.js的官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>，进去之后会是下面这个界面：</p><p>  <img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230101231947557.png" alt="image-20230101231947557"></p><p>前面的是长期维护版，后面的是最新版本，<strong>一般来讲使用前面的版本</strong>。</p><p>直接点击下载之后会得到一个安装包，下载好之后使用管理员打开安装包进行安装即可，一路默认，到选择路径的时候可以选择自定义路径安装，但最好是放在自己能找着的目录；最后一步会是这个样子：</p><p>  <img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230101232226918.png" alt="image-20230101232226918"></p><p><strong>在这里这个勾可以选也可以不选</strong>，选了之后会下载一些必要的工具，但是后面安装的时候可能会出现网络原因（因为服务器在外国）；当然不选择的话后面也可以自己安装那些工具，这里网络好点的可以勾选。</p><p>检测安装成功与否，只需要打开cmd输入<code>node -v</code>，出现了版本号就是安装成功：</p><p>  <img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230101232609979.png" alt="image-20230101232609979"></p><h2 id="2、通过nvm安装"><a href="#2、通过nvm安装" class="headerlink" title="2、通过nvm安装"></a>2、通过<strong>nvm</strong>安装</h2><h3 id="（1）安装"><a href="#（1）安装" class="headerlink" title="（1）安装"></a>（1）安装</h3><p>nvm是啥？nvm是一个node版本的管理器，非常方便！</p><p>nvm下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a>，以windows为例，直接下载最新版。</p><p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230101234856428.png" alt="image-20230101234856428"></p><p>下载好之后同样也是使用管理员打开，然后一路默认，安装路径那里根据自己需求更改，但最好是放在自己能找着的目录。</p><p>检测安装成功与否，打开cmd输入<code>nvm version</code>，出现版本号即是安装成功</p><p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230101235401868.png" alt="image-20230101235401868"></p><h3 id="（2）配置国内镜像源"><a href="#（2）配置国内镜像源" class="headerlink" title="（2）配置国内镜像源"></a>（2）配置国内镜像源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror https://npmmirror.com/mirrors/node/</span><br></pre></td></tr></table></figure><h3 id="（3）安装node"><a href="#（3）安装node" class="headerlink" title="（3）安装node"></a>（3）安装node</h3><h4 id="a、先使用命令查看node列表"><a href="#a、先使用命令查看node列表" class="headerlink" title="a、先使用命令查看node列表"></a>a、先使用命令查看node列表</h4><p>​    <code>node list</code></p><h4 id="b、安装指定版本的node"><a href="#b、安装指定版本的node" class="headerlink" title="b、安装指定版本的node"></a>b、安装指定版本的node</h4><p>​    <code>node install 指定版本号的node</code></p><h4 id="c、使用node"><a href="#c、使用node" class="headerlink" title="c、使用node"></a>c、使用node</h4><p>​    <code>node use 指定版本的node</code></p><h3 id="（4）使用node"><a href="#（4）使用node" class="headerlink" title="（4）使用node"></a>（4）使用node</h3><h4 id="a、新建一个js文件"><a href="#a、新建一个js文件" class="headerlink" title="a、新建一个js文件"></a>a、新建一个js文件</h4><p>​    <img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230102000216342.png" alt="image-20230102000216342"></p><h4 id="b、在该项目目录下打开终端"><a href="#b、在该项目目录下打开终端" class="headerlink" title="b、在该项目目录下打开终端"></a>b、在该项目目录下打开终端</h4><p>​    <strong>备注：在使用前一定要先<code>node use 指定版本号</code>，不然会报错node找不到的！</strong></p><p>​    打开终端后输入 <code>node js文件名</code>即可运行。</p><p>​    <img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230102002146932.png" alt="image-20230102002146932"></p><h1 id="三、Node-js和JavaScript的区别"><a href="#三、Node-js和JavaScript的区别" class="headerlink" title="三、Node.js和JavaScript的区别"></a>三、Node.js和JavaScript的区别</h1><p>两个都有ECMAScript标准，但JavaScript中有Dom和Bom，Node.js中没有后面两种。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、Node-jS简介&quot;&gt;&lt;a href=&quot;#一、Node-jS简介&quot; class=&quot;headerlink&quot; title=&quot;一、Node.jS简介&quot;&gt;&lt;/a&gt;一、Node.jS简介&lt;/h1&gt;&lt;p&gt;Node.js是一个运行在V8引擎上的JavaScript的运行环境。原始的JavaScript是运行在浏览器上的，而Node.js使得JavaScript可以运行在浏览器以外的地方。相对于大部分的浏览器语言来说，Node.js采用了单线程，使用异步的方式处理并发问题。&lt;/p&gt;
&lt;h1 id=&quot;二、Node-js安装&quot;&gt;&lt;a href=&quot;#二、Node-js安装&quot; class=&quot;headerlink&quot; title=&quot;二、Node.js安装&quot;&gt;&lt;/a&gt;二、Node.js安装&lt;/h1&gt;&lt;h2 id=&quot;1、直接安装（通过安装包）&quot;&gt;&lt;a href=&quot;#1、直接安装（通过安装包）&quot; class=&quot;headerlink&quot; title=&quot;1、直接安装（通过安装包）&quot;&gt;&lt;/a&gt;1、直接安装（通过安装包）&lt;/h2&gt;</summary>
    
    
    
    <category term="Node.js" scheme="https://poison02.github.io/categories/Node-js/"/>
    
    <category term="Node.js安装" scheme="https://poison02.github.io/categories/Node-js/Node-js%E5%AE%89%E8%A3%85/"/>
    
    
    <category term="Node.js" scheme="https://poison02.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Python数据类型</title>
    <link href="https://poison02.github.io/2023/01/04/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://poison02.github.io/2023/01/04/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-01-04T08:25:28.000Z</published>
    <updated>2023-01-04T08:34:10.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-列表，元组，字典，集合"><a href="#Python-列表，元组，字典，集合" class="headerlink" title="Python 列表，元组，字典，集合"></a>Python 列表，元组，字典，集合</h1><p>Python编程语言中有四种收集数据类型：</p><ul><li>**列表(List)**是一个有序且可更改的集合。 允许重复的成员。</li><li>**元组(Tuple)**是一个有序且不可更改的集合。 允许重复的成员。</li><li>**集合(Set)**是无序且未编制索引的集合。 没有重复的成员。</li><li>**字典(Dictionary)**是无序，可变且已编入索引的集合。 没有重复的成员。</li></ul><h2 id="1、list"><a href="#1、list" class="headerlink" title="1、list"></a>1、list</h2><p>Python 的列表（list）是最常用的数据结构，类似于C语言中的数组，但是和C语言数组有有很大的区别，C语言的数组只能存放相同类型，而list可以放不同类型的数据。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">list3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="1-1-列表的创建"><a href="#1-1-列表的创建" class="headerlink" title="1.1 列表的创建"></a>1.1 列表的创建</h3><p>·使用中括号  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsit1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>·使用内置函数list()  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))   <span class="comment">#以空格分隔数据，类似于输入多个数据，转换为list</span></span><br></pre></td></tr></table></figure><h3 id="1-2-列表的特点"><a href="#1-2-列表的特点" class="headerlink" title="1.2 列表的特点"></a>1.2 列表的特点</h3><p>· 列表元素按有序顺序存放</p><p>· <strong>索引</strong>映射唯一一个数据</p><p>· 列表可以重复存放数据</p><p>· 任意数据类型存放</p><p>· 根据需要动态分配和回收内存</p><h3 id="1-3列表元素的查找"><a href="#1-3列表元素的查找" class="headerlink" title="1.3列表元素的查找"></a>1.3列表元素的查找</h3><p>(1) 获取单个元素，索引操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>(2) 获取多个元素，切片操作, 返回值将是包含指定项目的新列表</p><p>语法格式： 列表名  <strong>[start:stop:step]</strong>       <strong>[start:stop]</strong>   step是步长，不写的时候默认为1，也可以为负数</p><p><strong>[start::step]</strong> 当stop不写时就表示从start开始的后面所有元素，以step分隔</p><p><strong>[:stop:step]</strong> 当start不写表示从开头到stop-1，以step分隔</p><p><strong>[::step]</strong> 都不写就表示整个序列，以step分隔</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>:<span class="number">3</span>:<span class="number">1</span>])   <span class="comment">#[2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>::<span class="number">1</span>])    <span class="comment">#[2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="built_in">print</span>(list1[:<span class="number">5</span>:<span class="number">1</span>])    <span class="comment">#[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(list1[::-<span class="number">1</span>])    <span class="comment">#[7, 6, 5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><h3 id="1-4列表元素的增加"><a href="#1-4列表元素的增加" class="headerlink" title="1.4列表元素的增加"></a>1.4列表元素的增加</h3><p>· append() 方法   在列表的<strong>末尾</strong>添加元素，可以添加单个元素，也可添加一个列表，元组，字典，集合，例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]    </span><br><span class="line">list1.append(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)    </span><br><span class="line">list2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    </span><br><span class="line">list1.append(list2)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="comment">#这里需要注意的是：使用append添加元素后并没有创建新的列表，而是在原有列表基础上添加的</span></span><br></pre></td></tr></table></figure><p>·insert() 方法    在列表的任意位置添加元素（任意位置就是按照<strong>索引</strong>添加的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">list1.insert(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><p>·extend()  方法 在列表的末尾至少添加一个元素 ，和append有点类似但又有区别，运送下面的代码来试试吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] </span><br><span class="line">list3 = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">list1.extend(list2)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line">list3.append(list2)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure><h3 id="1-5列表元素的删除"><a href="#1-5列表元素的删除" class="headerlink" title="1.5列表元素的删除"></a>1.5列表元素的删除</h3><p>·remove() 方法 一次删除一个元素（单个元素，列表，元组，字典，集合），若有重复元素则删除第一个，没有元素则报错，抛出valueError</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line">list1.remove([<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><p>·pop()  方法 删除一个指定索引位置上的元素，指定索引位置不存在元素就报错，不指定索引默认删除最后一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line">list1.pop(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="comment">#pop()会返回要删除的元素  list1.pop(1)  out:2</span></span><br></pre></td></tr></table></figure><p>·clear() 方法 清空列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list1.clear()</span><br></pre></td></tr></table></figure><p>· del 删除列表，可删除整个列表对象，也可以删除指定索引的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">#del list1[1]</span></span><br><span class="line"><span class="comment">#print(list1)</span></span><br><span class="line"><span class="keyword">del</span> lsit1</span><br></pre></td></tr></table></figure><p>·切片删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">list1[<span class="number">1</span>:<span class="number">4</span>] = []</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="1-6列表元素的修改"><a href="#1-6列表元素的修改" class="headerlink" title="1.6列表元素的修改"></a>1.6列表元素的修改</h3><p>·为指定索引的元素赋予一个新值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">45</span>]</span><br><span class="line">list2[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(list2)</span><br></pre></td></tr></table></figure><p>·为指定的切片赋予一个新值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">45</span>]</span><br><span class="line">list2[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br></pre></td></tr></table></figure><h3 id="1-7列表元素的排序"><a href="#1-7列表元素的排序" class="headerlink" title="1.7列表元素的排序"></a>1.7列表元素的排序</h3><p>·sort() 方法列表中所有元素按照从小到大排序，可以指定reverse &#x3D; True 就是降序排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list3 = [<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">list3.sort()</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line">list4 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">6</span>]</span><br><span class="line">list4.sort(reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(list4)</span><br></pre></td></tr></table></figure><p>·内置函数sorted()   从小到大进行排序，reverse&#x3D;True就是降序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list3 = [<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">list4 = <span class="built_in">sorted</span>(list3)  <span class="comment">#使用这个函数会创建一个新的列表，原列表还是不变</span></span><br><span class="line"><span class="built_in">print</span>(list4)</span><br></pre></td></tr></table></figure><h3 id="1-8列表的遍历"><a href="#1-8列表的遍历" class="headerlink" title="1.8列表的遍历"></a>1.8列表的遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="1-9列表推导式"><a href="#1-9列表推导式" class="headerlink" title="1.9列表推导式"></a>1.9列表推导式</h3><p>当您要基于现有列表的值创建新列表时，列表生成器表达式提供了一种较短的语法。</p><p>语法格式：[操作列表元素的表达式 for 自定义变量 in 列表]      </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]    </span><br><span class="line">list2 = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> list1]    <span class="comment">#i*2就是操作列表元素的表达式，i就是从列表取出来的元素</span></span><br><span class="line"><span class="built_in">print</span>(list2)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">langs = [<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;linux&quot;</span>, <span class="string">&quot;docker&quot;</span>]</span><br><span class="line">newlist = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> langs:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> <span class="keyword">in</span> x:</span><br><span class="line">        newlist.append(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br></pre></td></tr></table></figure><p>当使用了列表推导式后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">langs = [<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;linux&quot;</span>, <span class="string">&quot;docker&quot;</span>]</span><br><span class="line"></span><br><span class="line">newlist = [x <span class="keyword">for</span> x <span class="keyword">in</span> langs <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br></pre></td></tr></table></figure><h2 id="2、tuple"><a href="#2、tuple" class="headerlink" title="2、tuple"></a>2、tuple</h2><p>元组是不可变序列，就是没有增删改的操作</p><h3 id="2-1创建方式"><a href="#2-1创建方式" class="headerlink" title="2.1创建方式"></a>2.1创建方式</h3><p>·小括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>·使用内置函数tuple()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">tuple</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">45</span>))</span><br></pre></td></tr></table></figure><p>·只包含一个元素的元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure><h3 id="2-2-得到元组元素"><a href="#2-2-得到元组元素" class="headerlink" title="2.2 得到元组元素"></a>2.2 得到元组元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">tuple</span>((<span class="string">&#x27;python&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="2-3元组的遍历"><a href="#2-3元组的遍历" class="headerlink" title="2.3元组的遍历"></a>2.3元组的遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">tuple</span>((<span class="string">&#x27;python&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="3、dict"><a href="#3、dict" class="headerlink" title="3、dict"></a>3、dict</h2><p>字典和列表一样是可变序列，但是是由键值对组成，何为键值对，key：value，类似于查字典，根据key查找value</p><p>特点：所有元素都是一个键值对（key-value），key不能重复，value可以；字典中的元素是无序的</p><h3 id="3-1字典的创建"><a href="#3-1字典的创建" class="headerlink" title="3.1字典的创建"></a>3.1字典的创建</h3><p>·使用花括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>·使用内置函数dict</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 = <span class="built_in">dict</span>(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="3-2字典元素的查找"><a href="#3-2字典元素的查找" class="headerlink" title="3.2字典元素的查找"></a>3.2字典元素的查找</h3><p>·  [ ] </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure><p>· get()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1.get(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><p>比较：使用[]取值时‘如没有对应的key，则会抛出keyError异常；而用get()方法时没有对应的key返回None</p><h3 id="3-3字典元素的删除"><a href="#3-3字典元素的删除" class="headerlink" title="3.3字典元素的删除"></a>3.3字典元素的删除</h3><p>·del         删除选中的元素或者删除字典这个对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dit1[<span class="string">&#x27;a&#x27;</span>]   <span class="comment">#删除选中元素</span></span><br><span class="line"><span class="comment">#del dict1</span></span><br></pre></td></tr></table></figure><p>·clear()    删除字典中的所有键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">dict1.clear()</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><p>·popitem()方法     会删除字典最后一个键值对，并以元组方式返回删除的键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">dict1.popitem()</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><p>·pop()  删除选中的key的值，并返回所删除的键所对应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">dict1.pop(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure><h3 id="3-4字典元素的修改"><a href="#3-4字典元素的修改" class="headerlink" title="3.4字典元素的修改"></a>3.4字典元素的修改</h3><p>可以通过参考特定项的key来更改其值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">dict1[<span class="string">&#x27;a&#x27;</span>] = <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="3-5字典元素的增加"><a href="#3-5字典元素的增加" class="headerlink" title="3.5字典元素的增加"></a>3.5字典元素的增加</h3><p>通过使用新的索引键并为其分配值，可以向字典中添加项目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisdict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;cjavapy&quot;</span>,<span class="string">&quot;age&quot;</span>: <span class="number">3</span>,<span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span>&#125;</span><br><span class="line">thisdict[<span class="string">&quot;address&quot;</span>] = <span class="string">&quot;web&quot;</span></span><br><span class="line"><span class="built_in">print</span>(thisdict)</span><br></pre></td></tr></table></figure><h3 id="3-6获取字典视图"><a href="#3-6获取字典视图" class="headerlink" title="3.6获取字典视图"></a>3.6获取字典视图</h3><p>·keys()   获取字典中的所有key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thisdict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;cjavapy&quot;</span>,<span class="string">&quot;age&quot;</span>: <span class="number">3</span>,<span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(thisdict.keys())     <span class="comment">#dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;])</span></span><br></pre></td></tr></table></figure><p>·values()  获取字典中所有value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thisdict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;cjavapy&quot;</span>,<span class="string">&quot;age&quot;</span>: <span class="number">3</span>,<span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(thisdict.values())     <span class="comment">#dict_values([&#x27;cjavapy&#x27;, 3, &#x27;man&#x27;])</span></span><br></pre></td></tr></table></figure><p>·items()   获取字典中的所有键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thisdict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;cjavapy&quot;</span>,<span class="string">&quot;age&quot;</span>: <span class="number">3</span>,<span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(thisdict.items())     <span class="comment">#dict_items([(&#x27;name&#x27;, &#x27;cjavapy&#x27;), (&#x27;age&#x27;, 3), (&#x27;gender&#x27;, &#x27;man&#x27;)])</span></span><br></pre></td></tr></table></figure><h2 id="4、set运算"><a href="#4、set运算" class="headerlink" title="4、set运算"></a>4、set运算</h2><p>集合是<strong>无序且无索引</strong>的。 在Python中，集合用大括号括起来。集合元素<strong>不能修改</strong>，并且集合元素<strong>没有重复项</strong>，在去重的时候派上大用场</p><h3 id="4-1集合的创建"><a href="#4-1集合的创建" class="headerlink" title="4.1集合的创建"></a>4.1集合的创建</h3><p>· { }创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>·内置函数 set() </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>以上两种输出都不确定，因为<strong>集合是无序的！</strong></p><h3 id="4-2集合元素的获取"><a href="#4-2集合元素的获取" class="headerlink" title="4.2集合元素的获取"></a>4.2集合元素的获取</h3><p>集合不能用索引访问，<strong>因为是无序的！</strong>，所以就用遍历获取集合的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;python&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="4-3集合元素的添加"><a href="#4-3集合元素的添加" class="headerlink" title="4.3集合元素的添加"></a>4.3集合元素的添加</h3><p>·要将一个项目添加到集合中，请使用<code>add()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;python&#x27;</span>))</span><br><span class="line">s.add(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>·要向一个集合中添加多个项目，请使用<code>update()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line">thisset.update([<span class="string">&quot;js&quot;</span>, <span class="string">&quot;cjavapy&quot;</span>, <span class="string">&quot;linux&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure><h3 id="4-4删除集合的元素"><a href="#4-4删除集合的元素" class="headerlink" title="4.4删除集合的元素"></a>4.4删除集合的元素</h3><p>·remove()     如果不存在要删除的项目，<strong>就会报错</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line">thisset.remove(<span class="string">&quot;java&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure><p>·discard()     如果不存在要删除的项目，<strong>不会报错</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line">thisset.discard(<span class="string">&quot;java&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure><p>·pop()   删除最后一项，会返回删除的值，但是集合是无序的，所以不知道要删除的是谁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line">x = thisset.pop()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure><p>·<code>clear()</code>       清空集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line">thisset.clear()</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure><p>·<code>del</code>       将完全删除该集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> thisset</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure><h3 id="4-5连接两个集合"><a href="#4-5连接两个集合" class="headerlink" title="4.5连接两个集合"></a>4.5连接两个集合</h3><p>·<code>union（）</code>     方法返回一个新集合，其中包含两个集合中的所有项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span> , <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set3 = set1.union(set2)</span><br><span class="line"><span class="built_in">print</span>(set3)      </span><br></pre></td></tr></table></figure><p>·<code>update()</code>     方法将set2中的项插入到set1中:   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span> , <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set1.update(set2)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure><h3 id="4-6集合间的关系"><a href="#4-6集合间的关系" class="headerlink" title="4.6集合间的关系"></a>4.6集合间的关系</h3><p>·判断集合是否相等，用 &#x3D;&#x3D; 或 !&#x3D;</p><p>·一个集合是否是另一个集合的子集  用方法 <code>issubset()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2.issubset(s1))   <span class="comment">#s2是否是s1的子集</span></span><br></pre></td></tr></table></figure><p>·一个集合是否是另一个集合的超集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s1))   <span class="comment">#s1是否是s2的超集</span></span><br></pre></td></tr></table></figure><p>·两个集合是否没有交集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.isdisjoint(s2))    <span class="comment">#s2和s1是否没有交集，但是这里有交集所以返回False</span></span><br></pre></td></tr></table></figure><h3 id="4-7集合间的数据操作"><a href="#4-7集合间的数据操作" class="headerlink" title="4.7集合间的数据操作"></a>4.7集合间的数据操作</h3><p>1.求两个集合的交集<code>intersection</code> 或    <code>&amp;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># print(s1.intersection(s2))</span></span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)</span><br></pre></td></tr></table></figure><p>2.求两个元素的并集    <code>union</code>  或  <code>|</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">#print(s1.union(s2))</span></span><br><span class="line"><span class="built_in">print</span>(s1 | s2)</span><br></pre></td></tr></table></figure><p>3.求两个集合的差集   <code>difference</code>  或  <code>-</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">#print(s1.difference(s2))</span></span><br><span class="line"><span class="built_in">print</span>(s1 - s2)    <span class="comment">#相当于s1 中有的 s2中没有 </span></span><br></pre></td></tr></table></figure><p>4.求两个集合的对称差集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">#print(s1.symmetric_difference(s2))</span></span><br><span class="line"><span class="built_in">print</span>(s1 ^ s2)    <span class="comment">#相当于除了交集以外的</span></span><br><span class="line">集合元素</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Python-列表，元组，字典，集合&quot;&gt;&lt;a href=&quot;#Python-列表，元组，字典，集合&quot; class=&quot;headerlink&quot; title=&quot;Python 列表，元组，字典，集合&quot;&gt;&lt;/a&gt;Python 列表，元组，字典，集合&lt;/h1&gt;&lt;p&gt;Python编程语言中有四种收集数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**列表(List)**是一个有序且可更改的集合。 允许重复的成员。&lt;/li&gt;
&lt;li&gt;**元组(Tuple)**是一个有序且不可更改的集合。 允许重复的成员。&lt;/li&gt;
&lt;li&gt;**集合(Set)**是无序且未编制索引的集合。 没有重复的成员。&lt;/li&gt;
&lt;li&gt;**字典(Dictionary)**是无序，可变且已编入索引的集合。 没有重复的成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1、list&quot;&gt;&lt;a href=&quot;#1、list&quot; class=&quot;headerlink&quot; title=&quot;1、list&quot;&gt;&lt;/a&gt;1、list&lt;/h2&gt;</summary>
    
    
    
    <category term="Python" scheme="https://poison02.github.io/categories/Python/"/>
    
    <category term="Python基础" scheme="https://poison02.github.io/categories/Python/Python%E5%9F%BA%E7%A1%80/"/>
    
    <category term="Python数据类型" scheme="https://poison02.github.io/categories/Python/Python%E5%9F%BA%E7%A1%80/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
    
    <category term="Python" scheme="https://poison02.github.io/tags/Python/"/>
    
    <category term="Python数据类型" scheme="https://poison02.github.io/tags/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>第一篇测试文章</title>
    <link href="https://poison02.github.io/2022/12/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <id>https://poison02.github.io/2022/12/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</id>
    <published>2022-12-15T06:33:25.000Z</published>
    <updated>2023-01-04T08:24:17.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这是一篇测试文章"><a href="#这是一篇测试文章" class="headerlink" title="这是一篇测试文章"></a>这是一篇测试文章</h1><h3 id="单纯就是为了测试好不好用，试了，蛮好用的！"><a href="#单纯就是为了测试好不好用，试了，蛮好用的！" class="headerlink" title="单纯就是为了测试好不好用，试了，蛮好用的！"></a>单纯就是为了测试好不好用，试了，蛮好用的！</h3><p>你干嘛哈哈哎哟，能不能荔枝一点！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用C语言写一篇二分查找吧那就！</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个左指针</span></span><br><span class="line">    left = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 定义一个右指针</span></span><br><span class="line">    right = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 遍历数组</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="comment">// 定义一个中间指针,下面这样的操作是为了防止int溢出！</span></span><br><span class="line">        <span class="type">int</span> middle = left + (right - left &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 如果说目标值小于中间值</span></span><br><span class="line">        <span class="keyword">if</span> (nums[middle] &gt; target)&#123;</span><br><span class="line">            <span class="comment">// 那么就移动右指针</span></span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 目标值大于中间值</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[middle] &lt; target)&#123;</span><br><span class="line">            <span class="comment">//移动左指针</span></span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 否则返回中间指针</span></span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果找不到就返回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，本期教程到此结束！测试文章结束啦！:dart:</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;这是一篇测试文章&quot;&gt;&lt;a href=&quot;#这是一篇测试文章&quot; class=&quot;headerlink&quot; title=&quot;这是一篇测试文章&quot;&gt;&lt;/a&gt;这是一篇测试文章&lt;/h1&gt;&lt;h3 id=&quot;单纯就是为了测试好不好用，试了，蛮好用的！&quot;&gt;&lt;a href=&quot;#单纯就是为了测试好不好用，试了，蛮好用的！&quot; class=&quot;headerlink&quot; title=&quot;单纯就是为了测试好不好用，试了，蛮好用的！&quot;&gt;&lt;/a&gt;单纯就是为了测试好不好用，试了，蛮好用的！&lt;/h3&gt;&lt;p&gt;你干嘛哈哈哎哟，能不能荔枝一点！&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用C语言写一篇二分查找吧那就！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;* nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; numsSize, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 定义一个左指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 定义一个右指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    right = numsSize - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 遍历数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(left &amp;lt;= right)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 定义一个中间指针,下面这样的操作是为了防止int溢出！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; middle = left + (right - left &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如果说目标值小于中间值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nums[middle] &amp;gt; target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 那么就移动右指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            right = middle - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 目标值大于中间值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(nums[middle] &amp;lt; target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//移动左指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            left = middle + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 否则返回中间指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果找不到就返回-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="测试" scheme="https://poison02.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://poison02.github.io/2022/12/15/hello-world/"/>
    <id>https://poison02.github.io/2022/12/15/hello-world/</id>
    <published>2022-12-15T06:25:58.021Z</published>
    <updated>2022-12-15T06:25:58.021Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
