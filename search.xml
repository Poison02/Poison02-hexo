<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Node.js安装</title>
    <url>/2023/01/07/Nodejs%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="一、Node-jS简介"><a href="#一、Node-jS简介" class="headerlink" title="一、Node.jS简介"></a>一、Node.jS简介</h1><p>Node.js是一个运行在V8引擎上的JavaScript的运行环境。原始的JavaScript是运行在浏览器上的，而Node.js使得JavaScript可以运行在浏览器以外的地方。相对于大部分的浏览器语言来说，Node.js采用了单线程，使用异步的方式处理并发问题。</p>
<h1 id="二、Node-js安装"><a href="#二、Node-js安装" class="headerlink" title="二、Node.js安装"></a>二、Node.js安装</h1><h2 id="1、直接安装（通过安装包）"><a href="#1、直接安装（通过安装包）" class="headerlink" title="1、直接安装（通过安装包）"></a>1、直接安装（通过安装包）</h2><p>这里是Node.js的官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>，进去之后会是下面这个界面：</p>
<p>  <img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230101231947557.png" alt="image-20230101231947557"></p>
<p>前面的是长期维护版，后面的是最新版本，<strong>一般来讲使用前面的版本</strong>。</p>
<p>直接点击下载之后会得到一个安装包，下载好之后使用管理员打开安装包进行安装即可，一路默认，到选择路径的时候可以选择自定义路径安装，但最好是放在自己能找着的目录；最后一步会是这个样子：</p>
<p>  <img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230101232226918.png" alt="image-20230101232226918"></p>
<p><strong>在这里这个勾可以选也可以不选</strong>，选了之后会下载一些必要的工具，但是后面安装的时候可能会出现网络原因（因为服务器在外国）；当然不选择的话后面也可以自己安装那些工具，这里网络好点的可以勾选。</p>
<p>检测安装成功与否，只需要打开cmd输入<code>node -v</code>，出现了版本号就是安装成功：</p>
<p>  <img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230101232609979.png" alt="image-20230101232609979"></p>
<h2 id="2、通过nvm安装"><a href="#2、通过nvm安装" class="headerlink" title="2、通过nvm安装"></a>2、通过<strong>nvm</strong>安装</h2><h3 id="（1）安装"><a href="#（1）安装" class="headerlink" title="（1）安装"></a>（1）安装</h3><p>nvm是啥？nvm是一个node版本的管理器，非常方便！</p>
<p>nvm下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a>，以windows为例，直接下载最新版。</p>
<p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230101234856428.png" alt="image-20230101234856428"></p>
<p>下载好之后同样也是使用管理员打开，然后一路默认，安装路径那里根据自己需求更改，但最好是放在自己能找着的目录。</p>
<p>检测安装成功与否，打开cmd输入<code>nvm version</code>，出现版本号即是安装成功</p>
<p><img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230101235401868.png" alt="image-20230101235401868"></p>
<h3 id="（2）配置国内镜像源"><a href="#（2）配置国内镜像源" class="headerlink" title="（2）配置国内镜像源"></a>（2）配置国内镜像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm node_mirror https://npmmirror.com/mirrors/node/</span><br></pre></td></tr></table></figure>

<h3 id="（3）安装node"><a href="#（3）安装node" class="headerlink" title="（3）安装node"></a>（3）安装node</h3><h4 id="a、先使用命令查看node列表"><a href="#a、先使用命令查看node列表" class="headerlink" title="a、先使用命令查看node列表"></a>a、先使用命令查看node列表</h4><p>​    <code>node list</code></p>
<h4 id="b、安装指定版本的node"><a href="#b、安装指定版本的node" class="headerlink" title="b、安装指定版本的node"></a>b、安装指定版本的node</h4><p>​    <code>node install 指定版本号的node</code></p>
<h4 id="c、使用node"><a href="#c、使用node" class="headerlink" title="c、使用node"></a>c、使用node</h4><p>​    <code>node use 指定版本的node</code></p>
<h3 id="（4）使用node"><a href="#（4）使用node" class="headerlink" title="（4）使用node"></a>（4）使用node</h3><h4 id="a、新建一个js文件"><a href="#a、新建一个js文件" class="headerlink" title="a、新建一个js文件"></a>a、新建一个js文件</h4><p>​    <img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230102000216342.png" alt="image-20230102000216342"></p>
<h4 id="b、在该项目目录下打开终端"><a href="#b、在该项目目录下打开终端" class="headerlink" title="b、在该项目目录下打开终端"></a>b、在该项目目录下打开终端</h4><p>​    <strong>备注：在使用前一定要先<code>node use 指定版本号</code>，不然会报错node找不到的！</strong></p>
<p>​    打开终端后输入 <code>node js文件名</code>即可运行。</p>
<p>​    <img src="https://img-1315662121.cos.ap-guangzhou.myqcloud.com/img/image-20230102002146932.png" alt="image-20230102002146932"></p>
<h1 id="三、Node-js和JavaScript的区别"><a href="#三、Node-js和JavaScript的区别" class="headerlink" title="三、Node.js和JavaScript的区别"></a>三、Node.js和JavaScript的区别</h1><p>两个都有ECMAScript标准，但JavaScript中有Dom和Bom，Node.js中没有后面两种。</p>
]]></content>
      <categories>
        <category>Node.js</category>
        <category>Node.js安装</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据类型</title>
    <url>/2023/01/04/Python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="Python-列表，元组，字典，集合"><a href="#Python-列表，元组，字典，集合" class="headerlink" title="Python 列表，元组，字典，集合"></a>Python 列表，元组，字典，集合</h1><p>Python编程语言中有四种收集数据类型：</p>
<ul>
<li>**列表(List)**是一个有序且可更改的集合。 允许重复的成员。</li>
<li>**元组(Tuple)**是一个有序且不可更改的集合。 允许重复的成员。</li>
<li>**集合(Set)**是无序且未编制索引的集合。 没有重复的成员。</li>
<li>**字典(Dictionary)**是无序，可变且已编入索引的集合。 没有重复的成员。</li>
</ul>
<h2 id="1、list"><a href="#1、list" class="headerlink" title="1、list"></a>1、list</h2><p>Python 的列表（list）是最常用的数据结构，类似于C语言中的数组，但是和C语言数组有有很大的区别，C语言的数组只能存放相同类型，而list可以放不同类型的数据。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">list3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="1-1-列表的创建"><a href="#1-1-列表的创建" class="headerlink" title="1.1 列表的创建"></a>1.1 列表的创建</h3><p>·使用中括号  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lsit1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>·使用内置函数list()  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))   <span class="comment">#以空格分隔数据，类似于输入多个数据，转换为list</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-列表的特点"><a href="#1-2-列表的特点" class="headerlink" title="1.2 列表的特点"></a>1.2 列表的特点</h3><p>· 列表元素按有序顺序存放</p>
<p>· <strong>索引</strong>映射唯一一个数据</p>
<p>· 列表可以重复存放数据</p>
<p>· 任意数据类型存放</p>
<p>· 根据需要动态分配和回收内存</p>
<h3 id="1-3列表元素的查找"><a href="#1-3列表元素的查找" class="headerlink" title="1.3列表元素的查找"></a>1.3列表元素的查找</h3><p>(1) 获取单个元素，索引操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>(2) 获取多个元素，切片操作, 返回值将是包含指定项目的新列表</p>
<p>语法格式： 列表名  <strong>[start:stop:step]</strong>       <strong>[start:stop]</strong>   step是步长，不写的时候默认为1，也可以为负数</p>
<p><strong>[start::step]</strong> 当stop不写时就表示从start开始的后面所有元素，以step分隔</p>
<p><strong>[:stop:step]</strong> 当start不写表示从开头到stop-1，以step分隔</p>
<p><strong>[::step]</strong> 都不写就表示整个序列，以step分隔</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>:<span class="number">3</span>:<span class="number">1</span>])   <span class="comment">#[2, 3]</span></span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>::<span class="number">1</span>])    <span class="comment">#[2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="built_in">print</span>(list1[:<span class="number">5</span>:<span class="number">1</span>])    <span class="comment">#[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(list1[::-<span class="number">1</span>])    <span class="comment">#[7, 6, 5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4列表元素的增加"><a href="#1-4列表元素的增加" class="headerlink" title="1.4列表元素的增加"></a>1.4列表元素的增加</h3><p>· append() 方法   在列表的<strong>末尾</strong>添加元素，可以添加单个元素，也可添加一个列表，元组，字典，集合，例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]    </span><br><span class="line">list1.append(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)    </span><br><span class="line">list2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]    </span><br><span class="line">list1.append(list2)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="comment">#这里需要注意的是：使用append添加元素后并没有创建新的列表，而是在原有列表基础上添加的</span></span><br></pre></td></tr></table></figure>

<p>·insert() 方法    在列表的任意位置添加元素（任意位置就是按照<strong>索引</strong>添加的）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">list1.insert(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

<p>·extend()  方法 在列表的末尾至少添加一个元素 ，和append有点类似但又有区别，运送下面的代码来试试吧！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] </span><br><span class="line">list3 = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">list1.extend(list2)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line">list3.append(list2)</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br></pre></td></tr></table></figure>

<h3 id="1-5列表元素的删除"><a href="#1-5列表元素的删除" class="headerlink" title="1.5列表元素的删除"></a>1.5列表元素的删除</h3><p>·remove() 方法 一次删除一个元素（单个元素，列表，元组，字典，集合），若有重复元素则删除第一个，没有元素则报错，抛出valueError</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line">list1.remove([<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

<p>·pop()  方法 删除一个指定索引位置上的元素，指定索引位置不存在元素就报错，不指定索引默认删除最后一个元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line">list1.pop(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="comment">#pop()会返回要删除的元素  list1.pop(1)  out:2</span></span><br></pre></td></tr></table></figure>

<p>·clear() 方法 清空列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list1.clear()</span><br></pre></td></tr></table></figure>

<p>· del 删除列表，可删除整个列表对象，也可以删除指定索引的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">#del list1[1]</span></span><br><span class="line"><span class="comment">#print(list1)</span></span><br><span class="line"><span class="keyword">del</span> lsit1</span><br></pre></td></tr></table></figure>

<p>·切片删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">list1[<span class="number">1</span>:<span class="number">4</span>] = []</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>

<h3 id="1-6列表元素的修改"><a href="#1-6列表元素的修改" class="headerlink" title="1.6列表元素的修改"></a>1.6列表元素的修改</h3><p>·为指定索引的元素赋予一个新值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">45</span>]</span><br><span class="line">list2[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(list2)</span><br></pre></td></tr></table></figure>

<p>·为指定的切片赋予一个新值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">45</span>]</span><br><span class="line">list2[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br></pre></td></tr></table></figure>

<h3 id="1-7列表元素的排序"><a href="#1-7列表元素的排序" class="headerlink" title="1.7列表元素的排序"></a>1.7列表元素的排序</h3><p>·sort() 方法列表中所有元素按照从小到大排序，可以指定reverse &#x3D; True 就是降序排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list3 = [<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">list3.sort()</span><br><span class="line"><span class="built_in">print</span>(list3)</span><br><span class="line">list4 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">6</span>]</span><br><span class="line">list4.sort(reverse = <span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(list4)</span><br></pre></td></tr></table></figure>

<p>·内置函数sorted()   从小到大进行排序，reverse&#x3D;True就是降序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list3 = [<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">list4 = <span class="built_in">sorted</span>(list3)  <span class="comment">#使用这个函数会创建一个新的列表，原列表还是不变</span></span><br><span class="line"><span class="built_in">print</span>(list4)</span><br></pre></td></tr></table></figure>

<h3 id="1-8列表的遍历"><a href="#1-8列表的遍历" class="headerlink" title="1.8列表的遍历"></a>1.8列表的遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h3 id="1-9列表推导式"><a href="#1-9列表推导式" class="headerlink" title="1.9列表推导式"></a>1.9列表推导式</h3><p>当您要基于现有列表的值创建新列表时，列表生成器表达式提供了一种较短的语法。</p>
<p>语法格式：[操作列表元素的表达式 for 自定义变量 in 列表]      </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]    </span><br><span class="line">list2 = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> list1]    <span class="comment">#i*2就是操作列表元素的表达式，i就是从列表取出来的元素</span></span><br><span class="line"><span class="built_in">print</span>(list2)</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">langs = [<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;linux&quot;</span>, <span class="string">&quot;docker&quot;</span>]</span><br><span class="line">newlist = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> langs:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> <span class="keyword">in</span> x:</span><br><span class="line">        newlist.append(x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br></pre></td></tr></table></figure>

<p>当使用了列表推导式后：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">langs = [<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;linux&quot;</span>, <span class="string">&quot;docker&quot;</span>]</span><br><span class="line"></span><br><span class="line">newlist = [x <span class="keyword">for</span> x <span class="keyword">in</span> langs <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br></pre></td></tr></table></figure>

<h2 id="2、tuple"><a href="#2、tuple" class="headerlink" title="2、tuple"></a>2、tuple</h2><p>元组是不可变序列，就是没有增删改的操作</p>
<h3 id="2-1创建方式"><a href="#2-1创建方式" class="headerlink" title="2.1创建方式"></a>2.1创建方式</h3><p>·小括号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>·使用内置函数tuple()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">tuple</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">45</span>))</span><br></pre></td></tr></table></figure>

<p>·只包含一个元素的元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-得到元组元素"><a href="#2-2-得到元组元素" class="headerlink" title="2.2 得到元组元素"></a>2.2 得到元组元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">tuple</span>((<span class="string">&#x27;python&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h3 id="2-3元组的遍历"><a href="#2-3元组的遍历" class="headerlink" title="2.3元组的遍历"></a>2.3元组的遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = <span class="built_in">tuple</span>((<span class="string">&#x27;python&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">	<span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h2 id="3、dict"><a href="#3、dict" class="headerlink" title="3、dict"></a>3、dict</h2><p>字典和列表一样是可变序列，但是是由键值对组成，何为键值对，key：value，类似于查字典，根据key查找value</p>
<p>特点：所有元素都是一个键值对（key-value），key不能重复，value可以；字典中的元素是无序的			</p>
<h3 id="3-1字典的创建"><a href="#3-1字典的创建" class="headerlink" title="3.1字典的创建"></a>3.1字典的创建</h3><p>·使用花括号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p>·使用内置函数dict</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = <span class="built_in">dict</span>(a=<span class="number">1</span>,b=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-2字典元素的查找"><a href="#3-2字典元素的查找" class="headerlink" title="3.2字典元素的查找"></a>3.2字典元素的查找</h3><p>·  [ ] </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>· get()方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1.get(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>比较：使用[]取值时‘如没有对应的key，则会抛出keyError异常；而用get()方法时没有对应的key返回None</p>
<h3 id="3-3字典元素的删除"><a href="#3-3字典元素的删除" class="headerlink" title="3.3字典元素的删除"></a>3.3字典元素的删除</h3><p>·del         删除选中的元素或者删除字典这个对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">del</span> dit1[<span class="string">&#x27;a&#x27;</span>]   <span class="comment">#删除选中元素</span></span><br><span class="line"><span class="comment">#del dict1</span></span><br></pre></td></tr></table></figure>

<p>·clear()    删除字典中的所有键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">dict1.clear()</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure>

<p>·popitem()方法     会删除字典最后一个键值对，并以元组方式返回删除的键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">dict1.popitem()</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure>

<p>·pop()  删除选中的key的值，并返回所删除的键所对应的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">dict1.pop(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dict1)</span><br></pre></td></tr></table></figure>

<h3 id="3-4字典元素的修改"><a href="#3-4字典元素的修改" class="headerlink" title="3.4字典元素的修改"></a>3.4字典元素的修改</h3><p>可以通过参考特定项的key来更改其值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">dict1[<span class="string">&#x27;a&#x27;</span>] = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5字典元素的增加"><a href="#3-5字典元素的增加" class="headerlink" title="3.5字典元素的增加"></a>3.5字典元素的增加</h3><p>通过使用新的索引键并为其分配值，可以向字典中添加项目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thisdict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;cjavapy&quot;</span>,<span class="string">&quot;age&quot;</span>: <span class="number">3</span>,<span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span>&#125;</span><br><span class="line">thisdict[<span class="string">&quot;address&quot;</span>] = <span class="string">&quot;web&quot;</span></span><br><span class="line"><span class="built_in">print</span>(thisdict)</span><br></pre></td></tr></table></figure>

<h3 id="3-6获取字典视图"><a href="#3-6获取字典视图" class="headerlink" title="3.6获取字典视图"></a>3.6获取字典视图</h3><p>·keys()   获取字典中的所有key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thisdict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;cjavapy&quot;</span>,<span class="string">&quot;age&quot;</span>: <span class="number">3</span>,<span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(thisdict.keys())     <span class="comment">#dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;])</span></span><br></pre></td></tr></table></figure>

<p>·values()  获取字典中所有value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thisdict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;cjavapy&quot;</span>,<span class="string">&quot;age&quot;</span>: <span class="number">3</span>,<span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(thisdict.values())     <span class="comment">#dict_values([&#x27;cjavapy&#x27;, 3, &#x27;man&#x27;])</span></span><br></pre></td></tr></table></figure>

<p>·items()   获取字典中的所有键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thisdict = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;cjavapy&quot;</span>,<span class="string">&quot;age&quot;</span>: <span class="number">3</span>,<span class="string">&quot;gender&quot;</span>: <span class="string">&quot;man&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(thisdict.items())     <span class="comment">#dict_items([(&#x27;name&#x27;, &#x27;cjavapy&#x27;), (&#x27;age&#x27;, 3), (&#x27;gender&#x27;, &#x27;man&#x27;)])</span></span><br></pre></td></tr></table></figure>

<h2 id="4、set运算"><a href="#4、set运算" class="headerlink" title="4、set运算"></a>4、set运算</h2><p>集合是<strong>无序且无索引</strong>的。 在Python中，集合用大括号括起来。集合元素<strong>不能修改</strong>，并且集合元素<strong>没有重复项</strong>，在去重的时候派上大用场</p>
<h3 id="4-1集合的创建"><a href="#4-1集合的创建" class="headerlink" title="4.1集合的创建"></a>4.1集合的创建</h3><p>· { }创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<p>·内置函数 set() </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<p>以上两种输出都不确定，因为<strong>集合是无序的！</strong></p>
<h3 id="4-2集合元素的获取"><a href="#4-2集合元素的获取" class="headerlink" title="4.2集合元素的获取"></a>4.2集合元素的获取</h3><p>集合不能用索引访问，<strong>因为是无序的！</strong>，所以就用遍历获取集合的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;python&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<h3 id="4-3集合元素的添加"><a href="#4-3集合元素的添加" class="headerlink" title="4.3集合元素的添加"></a>4.3集合元素的添加</h3><p>·要将一个项目添加到集合中，请使用<code>add()</code>方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="built_in">set</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;python&#x27;</span>))</span><br><span class="line">s.add(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<p>·要向一个集合中添加多个项目，请使用<code>update()</code>方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line">thisset.update([<span class="string">&quot;js&quot;</span>, <span class="string">&quot;cjavapy&quot;</span>, <span class="string">&quot;linux&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure>

<h3 id="4-4删除集合的元素"><a href="#4-4删除集合的元素" class="headerlink" title="4.4删除集合的元素"></a>4.4删除集合的元素</h3><p>·remove()     如果不存在要删除的项目，<strong>就会报错</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line">thisset.remove(<span class="string">&quot;java&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure>

<p>·discard()     如果不存在要删除的项目，<strong>不会报错</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line">thisset.discard(<span class="string">&quot;java&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure>

<p>·pop()   删除最后一项，会返回删除的值，但是集合是无序的，所以不知道要删除的是谁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line">x = thisset.pop()</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure>

<p>·<code>clear()</code>       清空集合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line">thisset.clear()</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure>

<p>·<code>del</code>       将完全删除该集合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">thisset = &#123;<span class="string">&quot;c&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;python&quot;</span>&#125;</span><br><span class="line"><span class="keyword">del</span> thisset</span><br><span class="line"><span class="built_in">print</span>(thisset)</span><br></pre></td></tr></table></figure>

<h3 id="4-5连接两个集合"><a href="#4-5连接两个集合" class="headerlink" title="4.5连接两个集合"></a>4.5连接两个集合</h3><p>·<code>union（）</code>     方法返回一个新集合，其中包含两个集合中的所有项目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span> , <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set3 = set1.union(set2)</span><br><span class="line"><span class="built_in">print</span>(set3)      </span><br></pre></td></tr></table></figure>

<p>·<code>update()</code>     方法将set2中的项插入到set1中:   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span> , <span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set1.update(set2)</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure>

<h3 id="4-6集合间的关系"><a href="#4-6集合间的关系" class="headerlink" title="4.6集合间的关系"></a>4.6集合间的关系</h3><p>·判断集合是否相等，用 &#x3D;&#x3D; 或 !&#x3D;</p>
<p>·一个集合是否是另一个集合的子集  用方法 <code>issubset()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2.issubset(s1))   <span class="comment">#s2是否是s1的子集</span></span><br></pre></td></tr></table></figure>

<p>·一个集合是否是另一个集合的超集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.issuperset(s1))   <span class="comment">#s1是否是s2的超集</span></span><br></pre></td></tr></table></figure>

<p>·两个集合是否没有交集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.isdisjoint(s2))    <span class="comment">#s2和s1是否没有交集，但是这里有交集所以返回False</span></span><br></pre></td></tr></table></figure>

<h3 id="4-7集合间的数据操作"><a href="#4-7集合间的数据操作" class="headerlink" title="4.7集合间的数据操作"></a>4.7集合间的数据操作</h3><p>1.求两个集合的交集	<code>intersection</code> 或    <code>&amp;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># print(s1.intersection(s2))</span></span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)</span><br></pre></td></tr></table></figure>

<p>2.求两个元素的并集    <code>union</code>  或  <code>|</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">#print(s1.union(s2))</span></span><br><span class="line"><span class="built_in">print</span>(s1 | s2)</span><br></pre></td></tr></table></figure>

<p>3.求两个集合的差集   <code>difference</code>  或  <code>-</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">#print(s1.difference(s2))</span></span><br><span class="line"><span class="built_in">print</span>(s1 - s2)    <span class="comment">#相当于s1 中有的 s2中没有 </span></span><br></pre></td></tr></table></figure>

<p>4.求两个集合的对称差集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">#print(s1.symmetric_difference(s2))</span></span><br><span class="line"><span class="built_in">print</span>(s1 ^ s2)    <span class="comment">#相当于除了交集以外的</span></span><br><span class="line">集合元素</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
        <category>Python基础</category>
        <category>Python数据类型</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Python数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/12/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>同步和异步</title>
    <url>/2023/01/10/%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h1><h2 id="前言：进程和线程"><a href="#前言：进程和线程" class="headerlink" title="前言：进程和线程"></a>前言：进程和线程</h2><h3 id="1）进程"><a href="#1）进程" class="headerlink" title="1）进程"></a>1）进程</h3><p>类似程序运行的环境。比如一个工厂。</p>
<h3 id="2）线程"><a href="#2）线程" class="headerlink" title="2）线程"></a>2）线程</h3><p>线城市实际进行运算的东西。比如一个工厂里面的工人。</p>
<h2 id="一、同步"><a href="#一、同步" class="headerlink" title="一、同步"></a>一、同步</h2><p>通常情况下代码都是自上向下一行一行执行的。</p>
<p>同步就是后边的必须<strong>等待</strong>前边的完成才会继续。举个例子就是去餐厅点菜，用同步来说点完菜之后就一直等着上菜，什么都不做。</p>
<p>前边代码不执行，后面代码就不会执行，同步的代码执行会出现<strong>阻塞</strong>的情况。</p>
<p>一行代码执行慢会影响到整个程序的执行。</p>
<p>举个例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">	<span class="keyword">const</span> begin <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">// 这里相当于是while循环需要执行10秒钟</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - begin &lt; <span class="number">10000</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"><span class="comment">// 这里调用sum函数就会等待函数里面的while循环结束才会返回结果。程序在这里就造成了阻塞。</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>解决同步阻塞：<strong>异步</strong></p>
<h2 id="二、异步"><a href="#二、异步" class="headerlink" title="二、异步"></a>二、异步</h2><p>异步不需要<strong>等待</strong>。也就是说点完菜之后，去玩手机，不需要只等着菜。一段代码的执行不会影响到其他程序的运行。</p>
<p>举个例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">	<span class="keyword">const</span> begin <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">// 使用setTimeout实现异步。但是同时会出现问题，最后得到undefined。</span></span><br><span class="line">    <span class="title function_">setTimaout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"><span class="comment">// 这里因为使用的setTimeout，所以会返回undefined。</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>上边异步出现问题，异步的代码无法通过return得到</p>
<p>我们这里使用<strong>回调函数</strong>解决</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, callback</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(a + b);</span><br><span class="line">    &#125;, <span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>, <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222&quot;</span>);</span><br><span class="line"><span class="comment">// 结果是先返回111和222，间隔10秒返回result的值579.</span></span><br></pre></td></tr></table></figure>

<p>异步的特点：不会阻塞，通过回调函数。</p>
<p>但是此时又有一个新的问题：<strong>“死亡金字塔”</strong></p>
<p>意思就是说在回调函数中再次调用函数，…，以此类推，无限套娃。</p>
<p>基于回调函数的异步带来的问题</p>
<p>​	1、代码的可读性差</p>
<p>​	2、可调试性差</p>
<p>此时需要一个东西可以代替回调函数解决这个问题，返回结果</p>
<p>引出—<strong>Promise</strong></p>
<p>​								- Promise是一个用来存储数据的对象。存储方式特殊，可以用来存储异步调用的数据。下一章详细介绍Promise。</p>
]]></content>
      <categories>
        <category>Node.js</category>
        <category>同步和异步</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇测试文章</title>
    <url>/2022/12/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="这是一篇测试文章"><a href="#这是一篇测试文章" class="headerlink" title="这是一篇测试文章"></a>这是一篇测试文章</h1><h3 id="单纯就是为了测试好不好用，试了，蛮好用的！"><a href="#单纯就是为了测试好不好用，试了，蛮好用的！" class="headerlink" title="单纯就是为了测试好不好用，试了，蛮好用的！"></a>单纯就是为了测试好不好用，试了，蛮好用的！</h3><p>你干嘛哈哈哎哟，能不能荔枝一点！</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用C语言写一篇二分查找吧那就！</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个左指针</span></span><br><span class="line">    left = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 定义一个右指针</span></span><br><span class="line">    right = numsSize - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 遍历数组</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">        <span class="comment">// 定义一个中间指针,下面这样的操作是为了防止int溢出！</span></span><br><span class="line">        <span class="type">int</span> middle = left + (right - left &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 如果说目标值小于中间值</span></span><br><span class="line">        <span class="keyword">if</span> (nums[middle] &gt; target)&#123;</span><br><span class="line">            <span class="comment">// 那么就移动右指针</span></span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 目标值大于中间值</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[middle] &lt; target)&#123;</span><br><span class="line">            <span class="comment">//移动左指针</span></span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 否则返回中间指针</span></span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果找不到就返回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了，本期教程到此结束！测试文章结束啦！:dart:</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
